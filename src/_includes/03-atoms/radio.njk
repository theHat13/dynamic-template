{#
=========================
         RADIO         
=========================
Component that renders radio button inputs with consistent styling
#}

{% macro renderRadio(options) %}
  {# Initialize default values for styling classes #}
  {% set globalStyle = options.datas.globalStyle | default('') %}
  {% set fieldsetClasses = options.datas.fieldsetClasses | default('radio-group') %}
  {% set groupContainerClasses = options.datas.groupContainerClasses | default('flex space-x-4') %}
  
  {# Check if rendering as a group or individual radio #}
  {% if options.group %}
    <fieldset class="{{ fieldsetClasses }}">
      {% if options.groupLabel %}
        <legend class="{% if options.legendClasses %}{{ options.legendClasses }}{% else %}font-medium text-gray-700 mb-3{% endif %} {% if options.groupSrOnly %}sr-only{% endif %}">
          {{ options.groupLabel }}
        </legend>
      {% endif %}
      
      <div class="{{ groupContainerClasses }}">
        {% for radio in options.datas.radios %}
          {{ renderSingleRadio(radio, options.datas) }}
        {% endfor %}
      </div>
    </fieldset>
  {% else %}
    {# Initialize radioData as null before searching #}
    {% set radioData = null %}
    
    {# Find the radio matching the requested ID in the data collection #}
    {% for radio in options.datas.radios %}
      {% if radio.id == options.id %}
        {% set radioData = radio %}
      {% endif %}
    {% endfor %}
    
    {# Render radio if data was found, otherwise show error #}
    {% if radioData %}
      {{ renderSingleRadio(radioData, options.datas) }}
    {% else %}
      <span class="{{ options.datas.errorClasses | default('text-red-500') }}">Radio not found: {{ options.id }}</span>
    {% endif %}
  {% endif %}
{% endmacro %}

{% macro renderSingleRadio(radio, datas) %}
  {# Initialize style classes for the radio and its components #}
  {% set radioContainerClasses = datas.radioContainerClasses | default('flex items-center') %}
  {% set baseClasses = datas.baseClasses | default('size-4 rounded-full') %}
  
  {# Define state classes for different visual states #}
  {% set stateClasses = {
    'default': datas.variants.default | default('border-gray-300'),
    'hover': datas.variants.hover | default('border-gray-600'),
    'checked': datas.variants.checked | default('bg-gray-500 border-gray-500 text-white'),
    'focus': datas.variants.focus | default('border-blue-500 outline-none ring-2 ring-blue-300'),
    'disabled': datas.variants.disabled | default('bg-gray-100 border-gray-300 cursor-not-allowed'),
    'disabledChecked': datas.variants.disabledChecked | default('bg-gray-300 border-gray-300 cursor-not-allowed')
  } %}
  
  {# Combine base classes with default state #}
  {% set inputClasses = baseClasses ~ ' ' ~ stateClasses.default %}
  
  <div class="{{ radioContainerClasses }}">
    <input 
      type="radio" 
      id="{{ radio.id }}" 
      name="{{ radio.name | default(options.groupName) }}"
      value="{{ radio.value }}"
      class="{{ inputClasses }}"
      onfocus="this.className='{{ baseClasses }} {{ stateClasses.focus }}'" 
      onblur="this.className='{{ baseClasses }} {{ stateClasses.default }}'"
      onmouseover="this.className='{{ baseClasses }} {{ stateClasses.hover }}'" 
      onclick="this.checked ? this.className='{{ baseClasses }} {{ stateClasses.checked }}' : this.className='{{ baseClasses }} {{ stateClasses.default }}'"
      {% if radio.disabled %}
        disabled 
        class="{{ baseClasses }} {% if radio.checked %}{{ stateClasses.disabledChecked }}{% else %}{{ stateClasses.disabled }}{% endif %}"
      {% endif %}
      {% if radio.checked %}checked{% endif %}
    />
  </div>
{% endmacro %}



{#
============================
Summon HAT Components Wisely
============================

1. Import the macro at the top of your page
{% from "03-atoms/radio.njk" import renderRadio %}

2. Call a specific radio by its name
{{ renderRadio({ id: "radio1", datas: atoms.radios }) }}

3. Adding a new radio to radios.json
{
  "radios": [
    {
      "id": "unique_id",
      "name": "group_name",
      "value": "submission_value",
      "checked": true,
      "disabled": false,
      "ariaLabel": "Accessible label for screen readers"
    }
  ]
}

May your bugs be forever exiled to the shadow realm. üßô‚Äç‚ôÇÔ∏è‚ú®
#}