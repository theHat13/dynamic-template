{#
=========================
    CHIP NOTIFICATION
=========================
Component that renders notification chips with consistent styling based on content length
#}

{% macro renderChipNotification(options) %}
  {# Verify that required data structures are provided #}
  {% if options and options.datas and options.datas["chip-notifications"] %}

    {# Initialize chipData as null before searching #}
    {% set chipData = null %}
    
    {# Find the notification chip matching the requested name in the data collection #}
    {% for notification in options.datas["chip-notifications"] %}
      {% if notification.name == options.name %}
        {% set chipData = notification %}
      {% endif %}
    {% endfor %}
    
    {# Render chip if data was found #}
    {% if chipData %}
      {# Get global style and variant-specific style #}
      {% set globalStyle = options.datas.globalStyle %}
      {% set variantStyle = options.datas.variants[chipData.style] %}
      
      {# Determine size class based on content length #}
      {% set contentLength = chipData.text | string | length %}
      {% set sizeClass = "h-6 w-6 text-xs" %}
      
      {% if contentLength > 2 %}
        {% set sizeClass = "h-10 w-10 px-1 text-sm" %}
      {% elif contentLength > 1 %}
        {% set sizeClass = "h-8 w-8 text-sm" %}
      {% endif %}
      
      <span class="inline-flex items-center justify-center rounded-full text-white {{ globalStyle }} {{ variantStyle }} {{ sizeClass }}" role="status">
        {{ chipData.text }}
      </span>
    {% else %}
      {# Display error message if notification not found #}
      <span class="text-red-500">Notification '{{ options.name }}' not found</span>
    {% endif %}
  {% else %}
    {# Display error message if invalid data structure provided #}
    <span class="text-red-500">Invalid data structure</span>
  {% endif %}
{% endmacro %}

{#
============================
Summon HAT Components Wisely
============================

1. Import the macro at the top of your page
{% from "03-atoms/chip-notification.njk" import renderChipNotification %}

2. Call a specific chip notification by its name
{{ renderChipNotification({ name: "notification_count", datas: atoms.chipNotifications }) }}

3. Adding a new chip notification to chip-notifications.json
{
  "chip-notifications": [
    {
      "name": "new_notification_count",
      "text": "99+",
      "style": "warning"
    }
  ]
}

May your bugs be forever exiled to the shadow realm. üßô‚Äç‚ôÇÔ∏è‚ú®
#}