{# 
========================
         BUTTON           
========================
Component that renders button elements with consistent styling, icon support and state management
#}

{% macro renderButton(option) %}
  {# Verify that required data structures are provided #}
  {% if not option.datas %}
    <span class="text-red-500">Error: No button configuration provided</span>
  {% else %}
    {# Retrieve button configuration from data #}
    {% set buttonsConfig = option.datas %}
    {% set buttonName = option.name %}
    
    {# Find the specific button by name in the data collection #}
    {% set buttonData = null %}
    {% for button in buttonsConfig.buttons %}
      {% if button.name == buttonName %}
        {% set buttonData = button %}
      {% endif %}
    {% endfor %}

    {# Render button if data was found, otherwise show error #}
    {% if not buttonData %}
      <span class="text-red-500">Button not found: {{ buttonName }}</span>
    {% else %}
      {# Determine variant configuration based on style or default from button data #}
      {% set variant = option.style | default(buttonData.style) %}
      {% set variantConfig = buttonsConfig.variants[variant] %}
      
      {# Get global and size-specific classes #}
      {% set globalClasses = buttonsConfig.globalStyle %}
      {% set sizeClasses = buttonsConfig.sizes[buttonData.size | default('button')] %}
      
      {# Set up base classes and state classes for the button #}
      {% set baseClasses = globalClasses ~ ' ' ~ sizeClasses %}
      {% set stateClasses = {
        'default': variantConfig.default,
        'hover': variantConfig.hover,
        'focus': variantConfig.focus,
        'active': variantConfig.active,
        'disabled': variantConfig.disabled
      } %}
      
      {# Combine all default classes for initial state #}
      {% set combinedClasses = baseClasses ~ ' ' ~ stateClasses.default %}
      
      {# Render the button with event handlers for state management #}
      <button 
        type="{{ option.type | default('button') }}"
        class="{{ combinedClasses }} flex items-center justify-center"
        onfocus="if(!this.disabled) { this.className='{{ baseClasses }} {{ stateClasses.focus }} flex items-center justify-center'; this.setAttribute('data-focused', 'true'); }" 
        onblur="if(!this.disabled) { this.className='{{ baseClasses }} {{ stateClasses.default }} flex items-center justify-center'; this.removeAttribute('data-focused'); }"
        onmouseover="if(!this.disabled) { this.className=this.hasAttribute('data-focused') ? '{{ baseClasses }} {{ stateClasses.focus }} flex items-center justify-center' : '{{ baseClasses }} {{ stateClasses.hover }} flex items-center justify-center'; }" 
        onmouseout="if(!this.disabled) { this.className=this.hasAttribute('data-focused') ? '{{ baseClasses }} {{ stateClasses.focus }} flex items-center justify-center' : '{{ baseClasses }} {{ stateClasses.default }} flex items-center justify-center'; }" 
        onmousedown="if(!this.disabled) { this.className='{{ baseClasses }} {{ stateClasses.active }} flex items-center justify-center'; }" 
        onmouseup="if(!this.disabled) { this.className=this.hasAttribute('data-focused') ? '{{ baseClasses }} {{ stateClasses.focus }} flex items-center justify-center' : '{{ baseClasses }} {{ stateClasses.hover }} flex items-center justify-center'; }"
        {% if option.disabled or buttonData.disabled %}
          disabled 
          class="{{ baseClasses }} {{ stateClasses.disabled }} flex items-center justify-center"
        {% endif %}
      >
        {# Render content based on button variant type #}
        {% if variant == 'icon' %}
          {# Icon-only button rendering #}
          {% if buttonData.iconBefore %}
            {% if buttonData.iconBefore.endsWith('.svg') %}
              <span data-svg-src="{{ buttonData.iconBefore }}" class="inline-flex items-center justify-center w-5 h-5">
                <!-- SVG will be loaded here -->
              </span>
            {% else %}
              <img 
                src="{{ buttonData.iconBefore }}" 
                alt="{{ option.text | default(buttonData.text) }}" 
                class="w-5 h-5"
              />
            {% endif %}
          {% elif buttonData.icon %}
            {% if buttonData.icon.endsWith('.svg') %}
              <span data-svg-src="{{ buttonData.icon }}" class="inline-flex items-center justify-center w-5 h-5">
                <!-- SVG will be loaded here -->
              </span>
            {% else %}
              <img 
                src="{{ buttonData.icon }}" 
                alt="{{ option.text | default(buttonData.text) }}" 
                class="w-5 h-5"
              />
            {% endif %}
          {% endif %}
        {% elif variant == 'fixed' %}
          {# Fixed button - display only number #}
          <span>{{ option.number | default(buttonData.number) }}</span>
        {% else %}
          {# Standard button with optional icons and text #}
          
          {# Render icon before text if provided #}
          {% if buttonData.iconBefore %}
            {% if buttonData.iconBefore.endsWith('.svg') %}
              <span data-svg-src="{{ buttonData.iconBefore }}" class="inline-flex items-center justify-center mr-2 w-4 h-4">
                <!-- SVG will be loaded here -->
              </span>
            {% else %}
              <img 
                src="{{ buttonData.iconBefore }}" 
                alt="Icon" 
                class="mr-2 w-4 h-4"
              />
            {% endif %}
          {% elif buttonData.icon %}
            {% if buttonData.icon.endsWith('.svg') %}
              <span data-svg-src="{{ buttonData.icon }}" class="inline-flex items-center justify-center mr-2 w-4 h-4">
                <!-- SVG will be loaded here -->
              </span>
            {% else %}
              <img 
                src="{{ buttonData.icon }}" 
                alt="Icon" 
                class="mr-2 w-4 h-4"
              />
            {% endif %}
          {% endif %}
          
          {# Button text with override capability from options #}
          <span>{{ option.text | default(buttonData.text) }}</span>
          
          {# Render icon after text if provided #}
          {% if buttonData.iconAfter %}
            {% if buttonData.iconAfter.endsWith('.svg') %}
              <span data-svg-src="{{ buttonData.iconAfter }}" class="inline-flex items-center justify-center ml-2 w-4 h-4">
                <!-- SVG will be loaded here -->
              </span>
            {% else %}
              <img 
                src="{{ buttonData.iconAfter }}" 
                alt="Icon" 
                class="ml-2 w-4 h-4"
              />
            {% endif %}
          {% endif %}
        {% endif %}
      </button>
    {% endif %}
  {% endif %}
{% endmacro %}

{#
============================
Summon HAT Components Wisely
============================

1. Import the macro at the top of your page
{% from "03-atoms/button.njk" import renderButton %}

2. Call a specific button by its name
{{ renderButton({ 
    name: "submit_quest",
    datas: atoms.buttons 
}) }}

3. Adding a new button to buttons.json
{
  "buttons": [
    {
      "name": "new_button_name",
      "text": "Button Text",
      "style": "primary",
      "size": "medium",
      "icon": "/path/to/icon.svg" 
    }
  ]
}

May your bugs be forever exiled to the shadow realm. üßô‚Äç‚ôÇÔ∏è‚ú®
#}