{#
=========================
         SWITCH          
=========================
Component that renders switch controls with consistent styling
#}

{% macro renderSwitch(options) %}
  {# Initialize default values for styling classes #}
  {% set globalStyle = options.datas.globalStyle | default('') %}
  {% set fieldsetClasses = options.datas.fieldsetClasses | default('switch-group') %}
  {% set legendClasses = options.datas.legendClasses | default('font-medium text-gray-700 mb-3') %}
  {% set groupContainerClasses = options.datas.groupContainerClasses | default('flex space-x-4') %}
  
  {# Check if rendering as a group or individual switch #}
  {% if options.group %}
    <fieldset class="{{ fieldsetClasses }}">
      {% if options.groupLabel %}
        <legend class="{{ legendClasses }} {% if options.groupSrOnly %}sr-only{% endif %}">
          {{ options.groupLabel }}
        </legend>
      {% endif %}
      
      <div class="{{ groupContainerClasses }}">
        {% for switch in options.datas.switchs %}
          {{ renderSingleSwitch(switch, options.datas) }}
        {% endfor %}
      </div>
    </fieldset>
  {% else %}
    {# Initialize switchData as null before searching #}
    {% set switchData = null %}
    
    {# Find the switch matching the requested ID in the data collection #}
    {% for switch in options.datas.switchs %}
      {% if switch.id == options.id %}
        {% set switchData = switch %}
      {% endif %}
    {% endfor %}
    
    {# Render switch if data was found, otherwise show error #}
    {% if switchData %}
      {{ renderSingleSwitch(switchData, options.datas) }}
    {% else %}
      <span class="{{ options.datas.errorClasses | default('text-red-500') }}">Switch not found: {{ options.id }}</span>
    {% endif %}
  {% endif %}
{% endmacro %}

{% macro renderSingleSwitch(switch, datas) %}
  {# Determine variant and size, set defaults if not specified #}
  {% set variant = switch.variant | default('default') %}
  {% set size = switch.size | default('medium') %}
  
  {# Determine additional state classes based on switch state #}
  {% if switch.disabled and switch.checked %}
    {% set variant = 'disabledChecked' %}
  {% elseif switch.disabled %}
    {% set variant = 'disabled' %}
  {% elseif switch.checked %}
    {% set variant = 'checked' %}
  {% endif %}
  
  {# Retrieve specific classes for the selected variant #}
  {% set switchBaseClasses = datas.variants.container[variant].base %}
  {% set switchFocusClasses = datas.variants.container[variant].focus %}
  
  {# Retrieve thumb classes for the current variant #}
  {% set thumbBaseClasses = datas.variants.thumb[variant].base | default('bg-white') %}
  
  {# Get size classes from the data #}
  {% set containerSizeClasses = datas.variants.sizes[size].container %}
  {% set thumbSizeClasses = datas.variants.sizes[size].thumb %}
  
  <div class="inline-block {% if switch.disabled %}opacity-50{% endif %}">
    <label class="relative inline-block cursor-pointer {% if switch.disabled %}cursor-not-allowed{% endif %}">
      <input 
        type="checkbox" 
        id="{{ switch.id }}" 
        name="{{ switch.id }}"
        value="{{ switch.value }}"
        class="sr-only peer"
        {% if switch.checked %}checked{% endif %}
        {% if switch.disabled %}disabled{% endif %}
        {% if switch.ariaLabel %}aria-label="{{ switch.ariaLabel }}"{% endif %}
      />
      <div 
        class="relative rounded-full transition-all duration-200 
        {{ containerSizeClasses }}
        {{ switchBaseClasses }}
        peer-focus:outline-none peer-focus:ring-2 {{ switchFocusClasses }}"
      >
        <div 
          class="absolute top-1/2 -translate-y-1/2 rounded-full transition-all duration-200
          {{ thumbSizeClasses }}
          {{ thumbBaseClasses }}
          {% if switch.checked %}
            right-[2px] left-auto
          {% else %}
            left-[2px] right-auto
          {% endif %}"
        ></div>
      </div>
    </label>
  </div>
{% endmacro %}

{#
============================
Summon HAT Components Wisely
============================

1. Import the macro at the top of your page
{% from "03-atoms/switch.njk" import renderSwitch %}

2. Call a specific switch by its name
{{ renderSwitch({ id: "torch", datas: atoms.switchs }) }}

3. Adding a new switch to switchs.json
{
  "switchs": [
    {
      "id": "unique_id",
      "value": "submission_value",
      "checked": true,
      "disabled": false,
      "variant": "default",
      "size": "medium",
      "ariaLabel": "Accessible description"
    }
  ]
}

May your bugs be forever exiled to the shadow realm. üßô‚Äç‚ôÇÔ∏è‚ú®
#}