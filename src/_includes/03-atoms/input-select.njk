<!-- ========================= -->
<!--       INPUT SELECT        -->
<!-- ========================= -->

{% macro renderInputSelect(option) %}
  {# Get input select options with default values if not provided #}
  {% set name = option.name | default('select-default') %}
  {% set label = option.label | default('Label') %}
  {% set required = option.required | default(false) %}
  {% set placeholder = option.placeholder | default('Select an option...') %}
  {% set options = option.options | default([]) %}
  {% set variant = option.variant | default(input_select.defaultProps.variant) %}
  
  {# Find the variant in the input_select.json file #}
  {% set selectedVariant = null %}
  {% for v in input_select.variants %}
    {% if v.name == variant %}
      {% set selectedVariant = v %}
    {% endif %}
  {% endfor %}
  
  {# Use default variant if specified variant was not found #}
  {% if not selectedVariant %}
    {% for v in input_select.variants %}
      {% if v.name == input_select.defaultProps.variant %}
        {% set selectedVariant = v %}
      {% endif %}
    {% endfor %}
  {% endif %}
  
  {# Render the input select with appropriate classes #}
  <div>
    <label for="{{ name }}" class="block typography-label-l">
      {{ label }} {% if required %}*{% endif %}
    </label>

    <div class="relative mt-1.5">
      <input 
        type="text" 
        list="{{ name }}List" 
        id="{{ name }}" 
        name="{{ name }}" 
        class="{{ selectedVariant.class }}" 
        placeholder="{{ placeholder }}"
        {% if required %}required{% endif %}
      />

      <datalist id="{{ name }}List">
        {% for option in options %}
          <option value="{{ option.value }}">{{ option.label }}</option>
        {% endfor %}
      </datalist>
    </div>
  </div>
{% endmacro %}

<!-- ========================= -->
<!-- HOW TO USE THIS COMPONENT -->
<!-- ========================= -->

<!--
  Complete documentation in Storybook
  Basic usage: {% from "02-atoms-form/input-select.njk" import renderInputSelect %}
              {{ renderInputSelect(input_selects.select_data.character_classes) }}
  With style: {{ renderInputSelect({
                 name: "custom-select",
                 label: "Custom Label",
                 placeholder: "Select something...",
                 options: [
                   { value: "option1", label: "Option 1" },
                   { value: "option2", label: "Option 2" }
                 ],
                 variant: "primary",
                 required: true
               }) }}
-->