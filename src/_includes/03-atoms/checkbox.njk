{#
=========================
        CHECKBOX         
=========================
Component that renders checkbox inputs with consistent styling
#}

{% macro renderCheckbox(options) %}
  {# Initialize default values for styling classes #}
  {% set globalStyle = options.datas.globalStyle | default('') %}
  {% set fieldsetClasses = options.datas.fieldsetClasses | default('checkbox-group') %}
  {% set legendClasses = options.datas.legendClasses | default('font-medium text-gray-700 mb-3') %}
  {% set groupContainerClasses = options.datas.groupContainerClasses | default('space-y-2') %}
  
  {# Check if rendering as a group or individual checkbox #}
  {% if options.group %}
    <fieldset class="{{ fieldsetClasses }}">
      {% if options.groupLabel %}
        <legend class="{{ legendClasses }} {% if options.groupSrOnly %}sr-only{% endif %}">
          {{ options.groupLabel }}
        </legend>
      {% endif %}
      
      <div class="{{ groupContainerClasses }}">
        {% for checkbox in options.datas.checkboxes %}
          {{ renderSingleCheckbox(checkbox, options.datas) }}
        {% endfor %}
      </div>
    </fieldset>
  {% else %}
    {# Initialize checkboxData as null before searching #}
    {% set checkboxData = null %}
    
    {# Find the checkbox matching the requested ID in the data collection #}
    {% for checkbox in options.datas.checkboxes %}
      {% if checkbox.id == options.id %}
        {% set checkboxData = checkbox %}
      {% endif %}
    {% endfor %}
    
    {# Render checkbox if data was found, otherwise show error #}
    {% if checkboxData %}
      {{ renderSingleCheckbox(checkboxData, options.datas) }}
    {% else %}
      <span class="{{ options.datas.errorClasses | default('text-red-500') }}">Checkbox not found: {{ options.id }}</span>
    {% endif %}
  {% endif %}
{% endmacro %}

{% macro renderSingleCheckbox(checkbox, datas) %}
  {# Initialize style classes for the checkbox and its components #}
  {% set labelClasses = datas.labelClasses | default('flex cursor-pointer items-start gap-4') %}
  {% set checkboxContainerClasses = datas.checkboxContainerClasses | default('flex items-center') %}
  {% set baseClasses = datas.baseClasses | default('size-4 rounded-sm') %}
  {% set labelTextClasses = datas.labelTextClasses | default('font-medium text-gray-900') %}
  {% set descriptionClasses = datas.descriptionClasses | default('text-sm text-gray-500') %}
  
  {# Define state classes for different visual states #}
  {% set stateClasses = {
    'default': datas.variants.default | default('border-gray-300'),
    'hover': datas.variants.hover | default('border-gray-600'),
    'checked': datas.variants.checked | default('bg-gray-500 border-gray-500 text-white'),
    'focus': datas.variants.focus | default('border-blue-500 outline-none ring-2 ring-blue-300'),
    'disabled': datas.variants.disabled | default('bg-gray-100 border-gray-300 cursor-not-allowed'),
    'disabledChecked': datas.variants.disabledChecked | default('bg-gray-300 border-gray-300 cursor-not-allowed')
  } %}
  
  {# Combine base classes with default state #}
  {% set inputClasses = baseClasses ~ ' ' ~ stateClasses.default %}
  
  <label for="{{ checkbox.id }}" class="{{ labelClasses }}">
    <div class="{{ checkboxContainerClasses }}">
      <input 
        type="checkbox" 
        id="{{ checkbox.id }}" 
        name="{{ checkbox.id }}"
        value="{{ checkbox.value }}"
        class="{{ inputClasses }}"
        onfocus="this.className='{{ baseClasses }} {{ stateClasses.focus }}'" 
        onblur="this.className='{{ baseClasses }} {{ stateClasses.default }}'"
        onmouseover="this.className='{{ baseClasses }} {{ stateClasses.hover }}'" 
        onclick="this.checked ? this.className='{{ baseClasses }} {{ stateClasses.checked }}' : this.className='{{ baseClasses }} {{ stateClasses.default }}'"
        {% if checkbox.disabled %}
          disabled 
          class="{{ baseClasses }} {% if checkbox.checked %}{{ stateClasses.disabledChecked }}{% else %}{{ stateClasses.disabled }}{% endif %}"
        {% endif %}
        {% if checkbox.checked %}checked{% endif %}
        {% if checkbox.ariaLabel %}aria-label="{{ checkbox.ariaLabel }}"{% endif %}
      />
    </div>
    <div>
      <strong class="{{ labelTextClasses }}">
        {{ checkbox.label }}
      </strong>
      {% if checkbox.description %}
        <p class="{{ descriptionClasses }}">{{ checkbox.description }}</p>
      {% endif %}
    </div>
  </label>
{% endmacro %}



{#
============================
Summon HAT Components Wisely
============================

1. Import the macro at the top of your page
{% from "03-atoms/checkbox.njk" import renderCheckbox %}

2. Call a specific checkbox by its name
{{ renderCheckbox({ id: "option1", datas: atoms.checkboxs }) }}

3. Adding a new checkbox to checkboxs.json
{
  "checkboxes": [
    {
      "id": "unique_id",
      "label": "Checkbox Label",
      "value": "submission_value",
      "checked": true,
      "disabled": false,
      "description": "Additional details about the option",
      "ariaLabel": "Accessible label for screen readers"
    }
  ]
}

May your bugs be forever exiled to the shadow realm. üßô‚Äç‚ôÇÔ∏è‚ú®
#}